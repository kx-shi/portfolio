{"ast":null,"code":"var _jsxFileName = \"/home/kx-shi/PortfolioDemo/src/components/Test.js\",\n  _s = $RefreshSig$();\n// Project page\n// Dynamically pick page from projectPages\n\nimport { useParams, Route } from 'react-router-dom';\nimport { DatatonismPage, SpirPage, SteammindPage, SfbsPage } from './projects/export-projects';\nimport '../styles/projtemplate.css';\nimport projects from '../db.json';\nimport Project from './Project';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectPages = {\n  1: DatatonismPage,\n  2: SpirPage,\n  3: SteammindPage,\n  4: SfbsPage\n};\nexport default function Test(props) {\n  _s();\n  const {\n    id\n  } = useParams();\n  const Page = projectPages[id];\n  console.log(Page);\n  /*#__PURE__*/_jsxDEV(Route, {\n    exact: true,\n    path: \"/portfolio/:id\",\n    render: _ref => {\n      let {\n        match\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Project, {\n        proj: projects.find(p => p.id === match.params.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n/*\n        const { projectList, match } = this.props\n        const Page = projectPages[match.params.id]\n        console.log(Page)\n        return (\n            <Fragment>\n                <div class=\"container-grey no-flex\">\n                    <h1>{projectList[match.params.id].title}</h1>\n                    <Page />\n                </div>\n            </Fragment>\n        );\n*/\n_s(Test, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n_c = Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["useParams","Route","DatatonismPage","SpirPage","SteammindPage","SfbsPage","projects","Project","projectPages","Test","props","id","Page","console","log","match","find","p","params"],"sources":["/home/kx-shi/PortfolioDemo/src/components/Test.js"],"sourcesContent":["// Project page\n// Dynamically pick page from projectPages\n\nimport { useParams, Route } from 'react-router-dom';\nimport {DatatonismPage, SpirPage, SteammindPage, SfbsPage} from './projects/export-projects';\nimport '../styles/projtemplate.css';\nimport projects from '../db.json'\nimport Project from './Project'\n\nconst projectPages = {\n    1: DatatonismPage,\n    2: SpirPage,\n    3: SteammindPage,\n    4: SfbsPage,\n};\n\nexport default function Test(props) {\n    const { id } = useParams();\n    const Page = projectPages[id];\n    console.log(Page);\n    <Route exact path=\"/portfolio/:id\" render={({match}) => (\n        <Project proj={projects.find(p => p.id === match.params.id)} />\n    )} />\n}\n\n/*\n        const { projectList, match } = this.props\n        const Page = projectPages[match.params.id]\n        console.log(Page)\n        return (\n            <Fragment>\n                <div class=\"container-grey no-flex\">\n                    <h1>{projectList[match.params.id].title}</h1>\n                    <Page />\n                </div>\n            </Fragment>\n        );\n*/\n"],"mappings":";;AAAA;AACA;;AAEA,SAASA,SAAS,EAAEC,KAAK,QAAQ,kBAAkB;AACnD,SAAQC,cAAc,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,QAAO,4BAA4B;AAC5F,OAAO,4BAA4B;AACnC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAAA;AAE/B,MAAMC,YAAY,GAAG;EACjB,CAAC,EAAEN,cAAc;EACjB,CAAC,EAAEC,QAAQ;EACX,CAAC,EAAEC,aAAa;EAChB,CAAC,EAAEC;AACP,CAAC;AAED,eAAe,SAASI,IAAI,CAACC,KAAK,EAAE;EAAA;EAChC,MAAM;IAAEC;EAAG,CAAC,GAAGX,SAAS,EAAE;EAC1B,MAAMY,IAAI,GAAGJ,YAAY,CAACG,EAAE,CAAC;EAC7BE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB,qBAAC,KAAK;IAAC,KAAK;IAAC,IAAI,EAAC,gBAAgB;IAAC,MAAM,EAAE;MAAA,IAAC;QAACG;MAAK,CAAC;MAAA,oBAC/C,QAAC,OAAO;QAAC,IAAI,EAAET,QAAQ,CAACU,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKI,KAAK,CAACG,MAAM,CAACP,EAAE;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;EACjE;IAAA;IAAA;IAAA;EAAA,QAAG;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA,GATwBF,IAAI;EAAA,QACTT,SAAS;AAAA;AAAA,KADJS,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}